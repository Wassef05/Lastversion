import { ChangeDetectionStrategy, Component, EventEmitter, Injector, Input, NgZone, Output, Renderer2, ViewChild, } from '@angular/core';
import { isComponent, isTemplateRef } from '@ngneat/overview';
import { ENTER_ANIMATION_DURATION, EXIT_ANIMATION_DURATION } from '../../constants';
import { HotToastRef } from '../../hot-toast-ref';
import { animate } from '../../utils';
export class HotToastComponent {
    constructor(injector, renderer, ngZone) {
        this.injector = injector;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.offset = 0;
        this.height = new EventEmitter();
        this.beforeClosed = new EventEmitter();
        this.afterClosed = new EventEmitter();
        this.isManualClose = false;
        this.unlisteners = [];
    }
    ngOnInit() {
        if (isTemplateRef(this.toast.message)) {
            this.context = { $implicit: this.toastRef };
        }
        if (isComponent(this.toast.message)) {
            this.toastComponentInjector = Injector.create({
                providers: [
                    {
                        provide: HotToastRef,
                        useValue: this.toastRef,
                    },
                ],
                parent: this.toast.injector || this.injector,
            });
        }
    }
    ngAfterViewInit() {
        const nativeElement = this.toastBarBase.nativeElement;
        // Caretaker note: accessing `offsetHeight` triggers the whole layout update.
        // Macro tasks (like `setTimeout`) might be executed within the current rendering frame and cause a frame drop.
        requestAnimationFrame(() => {
            this.height.emit(nativeElement.offsetHeight);
        });
        // Caretaker note: `animationstart` and `animationend` events are event tasks that trigger change detection.
        // We'd want to trigger the change detection only if it's an exit animation.
        this.ngZone.runOutsideAngular(() => {
            this.unlisteners.push(
            // Caretaker note: we have to remove these event listeners at the end (even if the element is removed from DOM).
            // zone.js stores its `ZoneTask`s within the `nativeElement[Zone.__symbol__('animationstart') + 'false']` property
            // with callback that capture `this`.
            this.renderer.listen(nativeElement, 'animationstart', (event) => {
                if (this.isExitAnimation(event)) {
                    this.ngZone.run(() => this.beforeClosed.emit());
                }
            }), this.renderer.listen(nativeElement, 'animationend', (event) => {
                if (this.isExitAnimation(event)) {
                    this.ngZone.run(() => this.afterClosed.emit({ dismissedByAction: this.isManualClose, id: this.toast.id }));
                }
            }));
        });
        this.setToastAttributes();
    }
    get containerPositionStyle() {
        const top = this.toast.position.includes('top');
        const verticalStyle = top ? { top: 0 } : { bottom: 0 };
        const horizontalStyle = this.toast.position.includes('left')
            ? {
                left: 0,
            }
            : this.toast.position.includes('right')
                ? {
                    right: 0,
                }
                : {
                    left: 0,
                    right: 0,
                    justifyContent: 'center',
                };
        return Object.assign(Object.assign({ transform: `translateY(${this.offset * (top ? 1 : -1)}px)` }, verticalStyle), horizontalStyle);
    }
    get toastBarBaseStyles() {
        const top = this.toast.position.includes('top');
        const enterAnimation = `hotToastEnterAnimation${top ? 'Negative' : 'Positive'} ${ENTER_ANIMATION_DURATION}ms cubic-bezier(0.21, 1.02, 0.73, 1) forwards`;
        const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1) ${this.toast.duration}ms`;
        const animation = this.toast.autoClose ? `${enterAnimation}, ${exitAnimation}` : enterAnimation;
        return Object.assign(Object.assign({}, this.toast.style), { animation });
    }
    get isIconString() {
        return typeof this.toast.icon === 'string';
    }
    close() {
        this.isManualClose = true;
        const top = this.toast.position.includes('top');
        const exitAnimation = `hotToastExitAnimation${top ? 'Negative' : 'Positive'} ${EXIT_ANIMATION_DURATION}ms forwards cubic-bezier(0.06, 0.71, 0.55, 1)`;
        const nativeElement = this.toastBarBase.nativeElement;
        animate(nativeElement, exitAnimation);
    }
    ngOnDestroy() {
        this.close();
        while (this.unlisteners.length) {
            this.unlisteners.pop()();
        }
    }
    isExitAnimation(ev) {
        return ev.animationName.includes('hotToastExitAnimation');
    }
    setToastAttributes() {
        const toastAttributes = this.toast.attributes;
        for (const [key, value] of Object.entries(toastAttributes)) {
            this.renderer.setAttribute(this.toastBarBase.nativeElement, key, value);
        }
    }
}
HotToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'hot-toast',
                template: "<div\n  class=\"hot-toast-bar-base-container\"\n  [ngStyle]=\"containerPositionStyle\"\n  [ngClass]=\"'hot-toast-theme-' + toast.theme\"\n>\n  <div\n    class=\"hot-toast-bar-base\"\n    #hotToastBarBase\n    [ngStyle]=\"toastBarBaseStyles\"\n    [ngClass]=\"toast.className\"\n    [style.--hot-toast-animation-state]=\"isManualClose ? 'running' : 'paused'\"\n    [attr.aria-live]=\"toast.ariaLive\"\n    [attr.role]=\"toast.role\"\n  >\n    <div class=\"hot-toast-icon\" aria-hidden=\"true\">\n      <ng-container *ngIf=\"toast.icon !== undefined; else indicator\">\n        <ng-container *ngIf=\"isIconString; else iconTemplateOrComponent\">\n          <hot-toast-animated-icon [iconTheme]=\"toast.iconTheme\">{{ toast.icon }}</hot-toast-animated-icon>\n        </ng-container>\n        <ng-template #iconTemplateOrComponent>\n          <div>\n            <ng-container [dynamicView]=\"toast.icon\"></ng-container>\n          </div>\n        </ng-template>\n      </ng-container>\n\n      <ng-template #indicator>\n        <hot-toast-indicator [theme]=\"toast.iconTheme\" [type]=\"toast.type\"></hot-toast-indicator>\n      </ng-template>\n    </div>\n\n    <div class=\"hot-toast-message\">\n      <div>\n        <ng-container *dynamicView=\"toast.message; context: context; injector: toastComponentInjector\"></ng-container>\n      </div>\n    </div>\n\n    <button\n      *ngIf=\"toast.dismissible\"\n      (click)=\"close()\"\n      type=\"button\"\n      class=\"hot-toast-close-btn\"\n      aria-label=\"Close\"\n      [ngStyle]=\"toast.closeStyle\"\n    ></button>\n  </div>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".hot-toast-bar-base{align-items:var(--hot-toast-align-items,center);background-color:var(--hot-toast-bg,#fff);border-radius:var(--hot-toast-border-radius,4px);box-shadow:var(--hot-toast-shadow,0 3px 10px rgba(0,0,0,.1),0 3px 3px rgba(0,0,0,.05));color:var(--hot-toast-color,#363636);display:var(--hot-toast-display,flex);line-height:var(--hot-toast-line,1.3);margin:var(--hot-toast-margin,16px);max-width:var(--hot-toast-max-width,350px);padding:var(--hot-toast-padding,8px 10px);pointer-events:var(--hot-toast-pointer-events,auto);width:var(--hot-toast-width,-webkit-fit-content);width:var(--hot-toast-width,-moz-fit-content);width:var(--hot-toast-width,fit-content);will-change:var(--hot-toast-will-change,transform)}.hot-toast-bar-base:focus,.hot-toast-bar-base:hover{animation-play-state:var(--hot-toast-animation-state,paused)!important}@media (prefers-reduced-motion:reduce){.hot-toast-bar-base{animation-duration:var(--hot-toast-reduced-motion-animation-duration,10ms)!important}}.hot-toast-message{color:var(--hot-toast-message-color,inherit);display:var(--hot-toast-message-display,flex);flex:var(--hot-toast-message-flex,1);justify-content:var(--hot-toast-message-justify-content,center);margin:var(--hot-toast-message-margin,4px 10px)}.hot-toast-bar-base-container{display:var(--hot-toast-container-display,flex);pointer-events:var(--hot-toast-container-pointer-events,none);position:var(--hot-toast-container-position,absolute);transition:var(--hot-toast-container-transition,transform .23s cubic-bezier(.21,1.02,.73,1))}@media (prefers-reduced-motion:reduce){.hot-toast-bar-base-container{transition-duration:var(--hot-toast-container-reduced-motion-transition-duration,10ms)!important}}.hot-toast-bar-base-container.hot-toast-theme-snackbar .hot-toast-bar-base{background:var(--hot-toast-snackbar-bg,#323232);box-shadow:var(--hot-toast-snackbar-shadow,0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12));color:var(--hot-toast-snackbar-color,#fff)}.hot-toast-bar-base-container.hot-toast-theme-snackbar .hot-toast-close-btn{filter:var(--hot-toast-snackbar-close-btn-filter,invert(1) grayscale(100%) brightness(200%))}@keyframes hotToastEnterAnimationNegative{0%{opacity:.5;transform:translate3d(0,-80px,0) scale(.6)}to{opacity:1;transform:translateZ(0) scale(1)}}@keyframes hotToastEnterAnimationPositive{0%{opacity:.5;transform:translate3d(0,80px,0) scale(.6)}to{opacity:1;transform:translateZ(0) scale(1)}}@keyframes hotToastExitAnimationPositive{0%{opacity:1;transform:translateZ(-1px) scale(1)}to{opacity:0;transform:translate3d(0,130px,-1px) scale(.5)}}@keyframes hotToastExitAnimationNegative{0%{opacity:1;transform:translateZ(-1px) scale(1)}to{opacity:0;transform:translate3d(0,-130px,-1px) scale(.5)}}.hot-toast-close-btn{align-self:var(--hot-toast-close-btn-align-self,flex-start);background-color:var(--hot-toast-close-btn-background-color,transparent);background-image:var(--hot-toast-close-btn-background-image,url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e\"));background-position:var(--hot-toast-close-btn-background-position,center);background-repeat:var(--hot-toast-close-btn-background-repeat,no-repeat);background-size:var(--hot-toast-close-btn-background-size,.75em);border:var(--hot-toast-close-btn-border,0);border-radius:var(--hot-toast-close-btn-border-radius,.25rem);box-sizing:var(--hot-toast-close-btn-box-sizing,content-box);display:var(--hot-toast-close-btn-display,flex);height:var(--hot-toast-close-btn-height,.8em);margin-top:var(--hot-toast-close-btn-margin-top,.25em);opacity:var(--hot-toast-close-btn-opacity,.5);padding:var(--hot-toast-close-btn-padding,.25em);width:var(--hot-toast-close-btn-width,.8em)}.hot-toast-close-btn:focus{box-shadow:var(--hot-toast-close-btn-box-shadow,0 0 0 .125rem rgba(13,110,253,.25));outline:var(--hot-toast-close-btn-outline,none)}.hot-toast-close-btn:focus,.hot-toast-close-btn:hover{opacity:var(--hot-toast-close-btn-opacity,.75)}.hot-toast-icon{align-self:var(--hot-toast-icon-align-self,flex-start);padding-top:var(--hot-toast-icon-padding-top,.25em)}"]
            },] }
];
HotToastComponent.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: NgZone }
];
HotToastComponent.propDecorators = {
    toast: [{ type: Input }],
    offset: [{ type: Input }],
    defaultConfig: [{ type: Input }],
    toastRef: [{ type: Input }],
    height: [{ type: Output }],
    beforeClosed: [{ type: Output }],
    afterClosed: [{ type: Output }],
    toastBarBase: [{ type: ViewChild, args: ['hotToastBarBase',] }]
};
//# sourceMappingURL=data:application/json;base64,