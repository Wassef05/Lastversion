import { Directive, Input, NgModule, TemplateRef, ViewContainerRef, } from '@angular/core';
import { isString } from '../views/types';
import { ViewService } from '../views/view';
import { DynamicViewComponent } from './dynamic-view.component';
export class DynamicViewDirective {
    constructor(defaultTpl, vcr, viewService) {
        this.defaultTpl = defaultTpl;
        this.vcr = vcr;
        this.viewService = viewService;
    }
    ngOnInit() {
        this.resolveContentType();
    }
    ngOnChanges(changes) {
        if (changes.view && !changes.view.isFirstChange()) {
            this.resolveContentType();
        }
    }
    resolveContentType() {
        var _a, _b;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
        if (isString(this.view)) {
            this.viewRef = this.viewService.createComponent(DynamicViewComponent, {
                vcr: this.vcr,
                injector: this.injector,
            });
            this.viewRef.setInput('content', this.view).detectChanges();
        }
        else {
            this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {
                vcr: this.vcr,
                injector: (_b = this.injector) !== null && _b !== void 0 ? _b : this.vcr.injector,
                context: this.context,
            });
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
    }
}
DynamicViewDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dynamicView]',
            },] }
];
DynamicViewDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ViewService }
];
DynamicViewDirective.propDecorators = {
    view: [{ type: Input, args: ['dynamicView',] }],
    injector: [{ type: Input, args: ['dynamicViewInjector',] }],
    context: [{ type: Input, args: ['dynamicViewContext',] }]
};
export class DynamicViewModule {
}
DynamicViewModule.decorators = [
    { type: NgModule, args: [{
                declarations: [DynamicViewDirective, DynamicViewComponent],
                exports: [DynamicViewDirective],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy12aWV3LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsRUFLUixXQUFXLEVBQ1gsZ0JBQWdCLEdBQ2pCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBb0IsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUtoRSxNQUFNLE9BQU8sb0JBQW9CO0lBTy9CLFlBQW9CLFVBQTRCLEVBQVUsR0FBcUIsRUFBVSxXQUF3QjtRQUE3RixlQUFVLEdBQVYsVUFBVSxDQUFrQjtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBRyxDQUFDO0lBRXJILFFBQVE7UUFDTixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDakQsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsa0JBQWtCOztRQUNoQixNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFO2dCQUNwRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO2FBQ3hCLENBQUMsQ0FBQztZQUNGLElBQUksQ0FBQyxPQUF5QyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ2hHO2FBQU07WUFDTCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDdkUsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLFFBQVEsRUFBRSxNQUFBLElBQUksQ0FBQyxRQUFRLG1DQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUTtnQkFDNUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO2FBQ3RCLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELFdBQVc7O1FBQ1QsTUFBQSxJQUFJLENBQUMsT0FBTywwQ0FBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCOzs7WUFWQyxXQUFXO1lBQ1gsZ0JBQWdCO1lBR1QsV0FBVzs7O21CQVFqQixLQUFLLFNBQUMsYUFBYTt1QkFDbkIsS0FBSyxTQUFDLHFCQUFxQjtzQkFDM0IsS0FBSyxTQUFDLG9CQUFvQjs7QUEwQzdCLE1BQU0sT0FBTyxpQkFBaUI7OztZQUo3QixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLENBQUM7Z0JBQzFELE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO2FBQ2hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbmplY3RvcixcbiAgSW5wdXQsXG4gIE5nTW9kdWxlLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBTaW1wbGVDaGFuZ2VzLFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250ZW50LCBWaWV3UmVmLCBpc1N0cmluZyB9IGZyb20gJy4uL3ZpZXdzL3R5cGVzJztcbmltcG9ydCB7IFZpZXdTZXJ2aWNlIH0gZnJvbSAnLi4vdmlld3Mvdmlldyc7XG5pbXBvcnQgeyBDb21wUmVmIH0gZnJvbSAnLi4vdmlld3MvY29tcC1yZWYnO1xuaW1wb3J0IHsgRHluYW1pY1ZpZXdDb21wb25lbnQgfSBmcm9tICcuL2R5bmFtaWMtdmlldy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZHluYW1pY1ZpZXddJyxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ZpZXdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCdkeW5hbWljVmlldycpIHZpZXc6IENvbnRlbnQ7XG4gIEBJbnB1dCgnZHluYW1pY1ZpZXdJbmplY3RvcicpIGluamVjdG9yOiBJbmplY3RvcjtcbiAgQElucHV0KCdkeW5hbWljVmlld0NvbnRleHQnKSBjb250ZXh0OiBhbnk7XG5cbiAgcHJpdmF0ZSB2aWV3UmVmOiBWaWV3UmVmO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGVmYXVsdFRwbDogVGVtcGxhdGVSZWY8YW55PiwgcHJpdmF0ZSB2Y3I6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgdmlld1NlcnZpY2U6IFZpZXdTZXJ2aWNlKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVzb2x2ZUNvbnRlbnRUeXBlKCk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMudmlldyAmJiAhY2hhbmdlcy52aWV3LmlzRmlyc3RDaGFuZ2UoKSkge1xuICAgICAgdGhpcy5yZXNvbHZlQ29udGVudFR5cGUoKTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlQ29udGVudFR5cGUoKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gICAgaWYgKGlzU3RyaW5nKHRoaXMudmlldykpIHtcbiAgICAgIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1NlcnZpY2UuY3JlYXRlQ29tcG9uZW50KER5bmFtaWNWaWV3Q29tcG9uZW50LCB7XG4gICAgICAgIHZjcjogdGhpcy52Y3IsXG4gICAgICAgIGluamVjdG9yOiB0aGlzLmluamVjdG9yLFxuICAgICAgfSk7XG4gICAgICAodGhpcy52aWV3UmVmIGFzIENvbXBSZWY8RHluYW1pY1ZpZXdDb21wb25lbnQ+KS5zZXRJbnB1dCgnY29udGVudCcsIHRoaXMudmlldykuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdTZXJ2aWNlLmNyZWF0ZVZpZXcodGhpcy52aWV3IHx8IHRoaXMuZGVmYXVsdFRwbCwge1xuICAgICAgICB2Y3I6IHRoaXMudmNyLFxuICAgICAgICBpbmplY3RvcjogdGhpcy5pbmplY3RvciA/PyB0aGlzLnZjci5pbmplY3RvcixcbiAgICAgICAgY29udGV4dDogdGhpcy5jb250ZXh0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52aWV3UmVmPy5kZXN0cm95KCk7XG4gIH1cbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbRHluYW1pY1ZpZXdEaXJlY3RpdmUsIER5bmFtaWNWaWV3Q29tcG9uZW50XSxcbiAgZXhwb3J0czogW0R5bmFtaWNWaWV3RGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgRHluYW1pY1ZpZXdNb2R1bGUge31cbiJdfQ==