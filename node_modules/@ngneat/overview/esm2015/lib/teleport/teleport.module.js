import { Directive, Input, NgModule, TemplateRef, } from '@angular/core';
import { TeleportService } from './teleport.service';
import { TeleportOutletDirective } from './teleport-outlet.directive';
export class TeleportDirective {
    constructor(tpl, service) {
        this.tpl = tpl;
        this.service = service;
        this.subscription = null;
    }
    ngOnChanges(changes) {
        if (changes.teleportTo && typeof this.teleportTo === 'string') {
            this.dispose();
            this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {
                if (outlet) {
                    this.viewRef = outlet.createEmbeddedView(this.tpl);
                }
            });
        }
    }
    ngOnDestroy() {
        this.dispose();
    }
    dispose() {
        var _a, _b;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        this.subscription = null;
        (_b = this.viewRef) === null || _b === void 0 ? void 0 : _b.destroy();
    }
}
TeleportDirective.decorators = [
    { type: Directive, args: [{
                selector: '[teleportTo]',
            },] }
];
TeleportDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: TeleportService }
];
TeleportDirective.propDecorators = {
    teleportTo: [{ type: Input }]
};
export class TeleportModule {
}
TeleportModule.decorators = [
    { type: NgModule, args: [{
                declarations: [TeleportDirective, TeleportOutletDirective],
                exports: [TeleportDirective, TeleportOutletDirective],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L292ZXJ2aWV3L3NyYy9saWIvdGVsZXBvcnQvdGVsZXBvcnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsS0FBSyxFQUNMLFFBQVEsRUFJUixXQUFXLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBS3RFLE1BQU0sT0FBTyxpQkFBaUI7SUFNNUIsWUFBb0IsR0FBcUIsRUFBVSxPQUF3QjtRQUF2RCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBRm5FLGlCQUFZLEdBQXdCLElBQUksQ0FBQztJQUU2QixDQUFDO0lBRS9FLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxVQUFVLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVEsRUFBRTtZQUM3RCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFFZixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtnQkFDN0UsSUFBSSxNQUFNLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNwRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDO0lBRU8sT0FBTzs7UUFDYixNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7O1lBL0JGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7O1lBVEMsV0FBVztZQUlKLGVBQWU7Ozt5QkFPckIsS0FBSzs7QUFrQ1IsTUFBTSxPQUFPLGNBQWM7OztZQUoxQixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUM7Z0JBQzFELE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLHVCQUF1QixDQUFDO2FBQ3REIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIElucHV0LFxuICBOZ01vZHVsZSxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBUZWxlcG9ydFNlcnZpY2UgfSBmcm9tICcuL3RlbGVwb3J0LnNlcnZpY2UnO1xuaW1wb3J0IHsgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmUgfSBmcm9tICcuL3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbdGVsZXBvcnRUb10nLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgQElucHV0KCkgdGVsZXBvcnRUbzogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIHZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cGw6IFRlbXBsYXRlUmVmPGFueT4sIHByaXZhdGUgc2VydmljZTogVGVsZXBvcnRTZXJ2aWNlKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlcy50ZWxlcG9ydFRvICYmIHR5cGVvZiB0aGlzLnRlbGVwb3J0VG8gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmRpc3Bvc2UoKTtcblxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnNlcnZpY2Uub3V0bGV0JCh0aGlzLnRlbGVwb3J0VG8pLnN1YnNjcmliZSgob3V0bGV0KSA9PiB7XG4gICAgICAgIGlmIChvdXRsZXQpIHtcbiAgICAgICAgICB0aGlzLnZpZXdSZWYgPSBvdXRsZXQuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudHBsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kaXNwb3NlKCk7XG4gIH1cblxuICBwcml2YXRlIGRpc3Bvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMudmlld1JlZj8uZGVzdHJveSgpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RlbGVwb3J0RGlyZWN0aXZlLCBUZWxlcG9ydE91dGxldERpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtUZWxlcG9ydERpcmVjdGl2ZSwgVGVsZXBvcnRPdXRsZXREaXJlY3RpdmVdLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydE1vZHVsZSB7fVxuIl19