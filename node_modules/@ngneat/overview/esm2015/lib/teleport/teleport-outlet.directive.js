import { Directive, Input, ViewContainerRef } from '@angular/core';
import { TeleportService } from './teleport.service';
export class TeleportOutletDirective {
    constructor(vcr, service) {
        this.vcr = vcr;
        this.service = service;
    }
    ngOnChanges(changes) {
        // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used
        // as keys for the `ports` map.
        if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {
            this.service.ports.set(this.teleportOutlet, this.vcr);
            this.service.newOutlet(this.teleportOutlet);
        }
    }
    ngOnDestroy() {
        this.service.ports.delete(this.teleportOutlet);
    }
}
TeleportOutletDirective.decorators = [
    { type: Directive, args: [{
                selector: '[teleportOutlet]',
            },] }
];
TeleportOutletDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TeleportService }
];
TeleportOutletDirective.propDecorators = {
    teleportOutlet: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZXBvcnQtb3V0bGV0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9vdmVydmlldy9zcmMvbGliL3RlbGVwb3J0L3RlbGVwb3J0LW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXVDLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUtyRCxNQUFNLE9BQU8sdUJBQXVCO0lBSWxDLFlBQW9CLEdBQXFCLEVBQVUsT0FBd0I7UUFBdkQsUUFBRyxHQUFILEdBQUcsQ0FBa0I7UUFBVSxZQUFPLEdBQVAsT0FBTyxDQUFpQjtJQUFHLENBQUM7SUFFL0UsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLCtGQUErRjtRQUMvRiwrQkFBK0I7UUFDL0IsSUFBSSxPQUFPLENBQUMsY0FBYyxJQUFJLE9BQU8sSUFBSSxDQUFDLGNBQWMsS0FBSyxRQUFRLEVBQUU7WUFDckUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7WUFwQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7YUFDN0I7OztZQUwrRCxnQkFBZ0I7WUFDdkUsZUFBZTs7OzZCQU9yQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbGVwb3J0U2VydmljZSB9IGZyb20gJy4vdGVsZXBvcnQuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1t0ZWxlcG9ydE91dGxldF0nLFxufSlcbmV4cG9ydCBjbGFzcyBUZWxlcG9ydE91dGxldERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgLy8gV2UgY291bGQndmUgYWxzbyB1c2VkIHRoZSBgbmdBY2NlcHRJbnB1dFR5cGVgLCBidXQgaXQncyBiZWluZyBkZXByZWNhdGVkIGluIG5ld2VyIEFuZ3VsYXIgdmVyc2lvbnMuXG4gIEBJbnB1dCgpIHRlbGVwb3J0T3V0bGV0OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIHNlcnZpY2U6IFRlbGVwb3J0U2VydmljZSkge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgLy8gVGhlIGB0ZWxlcG9ydE91dGxldGAgbWlnaHQgYmUgYG51bGx8dW5kZWZpbmVkYCwgYnV0IHdlIGRvbid0IHdhbnQgbnVsbGFibGUgdmFsdWVzIHRvIGJlIHVzZWRcbiAgICAvLyBhcyBrZXlzIGZvciB0aGUgYHBvcnRzYCBtYXAuXG4gICAgaWYgKGNoYW5nZXMudGVsZXBvcnRPdXRsZXQgJiYgdHlwZW9mIHRoaXMudGVsZXBvcnRPdXRsZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnNlcnZpY2UucG9ydHMuc2V0KHRoaXMudGVsZXBvcnRPdXRsZXQsIHRoaXMudmNyKTtcbiAgICAgIHRoaXMuc2VydmljZS5uZXdPdXRsZXQodGhpcy50ZWxlcG9ydE91dGxldCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5zZXJ2aWNlLnBvcnRzLmRlbGV0ZSh0aGlzLnRlbGVwb3J0T3V0bGV0KTtcbiAgfVxufVxuIl19