{"version":3,"file":"ngneat-overview.js","sources":["../../../../projects/ngneat/overview/src/lib/teleport/teleport.service.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport-outlet.directive.ts","../../../../projects/ngneat/overview/src/lib/teleport/teleport.module.ts","../../../../projects/ngneat/overview/src/lib/views/types.ts","../../../../projects/ngneat/overview/src/lib/views/template-ref.ts","../../../../projects/ngneat/overview/src/lib/views/string-ref.ts","../../../../projects/ngneat/overview/src/lib/views/comp-ref.ts","../../../../projects/ngneat/overview/src/lib/views/view.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.component.ts","../../../../projects/ngneat/overview/src/lib/dynamic-view/dynamic-view.directive.ts","../../../../projects/ngneat/overview/src/public-api.ts","../../../../projects/ngneat/overview/src/ngneat-overview.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, ViewContainerRef } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeleportService {\n  private outlets = new BehaviorSubject<string>('');\n  private asObservable = this.outlets.asObservable();\n\n  outlet$(name: string) {\n    return this.asObservable.pipe(filter(current => current === name), map(name => this.ports.get(name)));\n  }\n\n  ports = new Map<string, ViewContainerRef>();\n\n  newOutlet(name: string) {\n    this.outlets.next(name);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { TeleportService } from './teleport.service';\n\n@Directive({\n  selector: '[teleportOutlet]',\n})\nexport class TeleportOutletDirective implements OnChanges, OnDestroy {\n  // We could've also used the `ngAcceptInputType`, but it's being deprecated in newer Angular versions.\n  @Input() teleportOutlet: string | null | undefined;\n\n  constructor(private vcr: ViewContainerRef, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // The `teleportOutlet` might be `null|undefined`, but we don't want nullable values to be used\n    // as keys for the `ports` map.\n    if (changes.teleportOutlet && typeof this.teleportOutlet === 'string') {\n      this.service.ports.set(this.teleportOutlet, this.vcr);\n      this.service.newOutlet(this.teleportOutlet);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.service.ports.delete(this.teleportOutlet);\n  }\n}\n","import {\n  Directive,\n  EmbeddedViewRef,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  TemplateRef,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { TeleportService } from './teleport.service';\nimport { TeleportOutletDirective } from './teleport-outlet.directive';\n\n@Directive({\n  selector: '[teleportTo]',\n})\nexport class TeleportDirective implements OnChanges, OnDestroy {\n  @Input() teleportTo: string | null | undefined;\n\n  private viewRef: EmbeddedViewRef<any>;\n  private subscription: Subscription | null = null;\n\n  constructor(private tpl: TemplateRef<any>, private service: TeleportService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.teleportTo && typeof this.teleportTo === 'string') {\n      this.dispose();\n\n      this.subscription = this.service.outlet$(this.teleportTo).subscribe((outlet) => {\n        if (outlet) {\n          this.viewRef = outlet.createEmbeddedView(this.tpl);\n        }\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.dispose();\n  }\n\n  private dispose(): void {\n    this.subscription?.unsubscribe();\n    this.subscription = null;\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [TeleportDirective, TeleportOutletDirective],\n  exports: [TeleportDirective, TeleportOutletDirective],\n})\nexport class TeleportModule {}\n","import { TemplateRef, Type } from '@angular/core';\n\nexport interface ViewRef {\n  getElement(): Element | string;\n\n  detectChanges(): void;\n\n  destroy(): void;\n}\n\ntype ExcludeFunctionPropertyNames<T> = {\n  [Key in keyof T]: T[Key] extends Function ? never : Key;\n}[keyof T];\n\nexport type ExcludeFunctions<T> = Pick<T, ExcludeFunctionPropertyNames<T>>;\nexport type Content = string | TemplateRef<any> | Type<any>;\n\nexport function isTemplateRef(value: any): value is TemplateRef<any> {\n  return value instanceof TemplateRef;\n}\n\nexport function isComponent(value: any): value is Type<any> {\n  return typeof value === 'function';\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === 'string';\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  EmbeddedViewRef,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ViewRef } from './types';\n\ninterface Args<C> {\n  tpl: TemplateRef<C>;\n  context: C;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n}\n\nexport class TplRef<C> implements ViewRef {\n  private viewRef: EmbeddedViewRef<{}>;\n  private element: Element;\n  private wrapper: Element | null = null;\n\n  constructor(private args: Args<C>) {\n    if (this.args.vcr) {\n      this.viewRef = this.args.vcr.createEmbeddedView(this.args.tpl, this.args.context || {});\n      this.viewRef.detectChanges();\n    } else {\n      this.viewRef = this.args.tpl.createEmbeddedView(this.args.context || ({} as C));\n      this.viewRef.detectChanges();\n      this.args.appRef.attachView(this.viewRef);\n    }\n  }\n\n  detectChanges() {\n    this.viewRef.detectChanges();\n  }\n\n  getElement(): Element {\n    const rootNodes = this.viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0] === Node.ELEMENT_NODE) {\n      this.element = rootNodes[0];\n    } else {\n      this.element = document.createElement('div');\n      this.element.append(...rootNodes);\n    }\n\n    return this.element;\n  }\n\n  destroy() {\n    if (this.viewRef.rootNodes[0] !== 1) {\n      this.element?.parentNode.removeChild(this.element);\n      this.element = null;\n    }\n\n    if (!this.args.vcr) {\n      this.args.appRef.detachView(this.viewRef);\n    }\n\n    this.viewRef.destroy();\n    this.viewRef = null;\n  }\n}\n","import { ViewRef } from './types';\n\nexport class StringRef implements ViewRef {\n  constructor(private value: string) {}\n\n  getElement(): string {\n    return this.value;\n  }\n\n  detectChanges() {}\n\n  destroy() {}\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injector,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ExcludeFunctions, ViewRef } from './types';\n\ninterface Args<C> {\n  component: Type<C>;\n  injector: Injector;\n  resolver: ComponentFactoryResolver;\n  vcr: ViewContainerRef | undefined;\n  appRef: ApplicationRef | undefined;\n}\n\nexport class CompRef<T> implements ViewRef {\n  private compRef: ComponentRef<T>;\n\n  constructor(private args: Args<T>) {\n    const factory = this.args.resolver.resolveComponentFactory<T>(this.args.component);\n    if (this.args.vcr) {\n      this.compRef = this.args.vcr.createComponent(\n        factory,\n        this.args.vcr.length,\n        args.injector || this.args.vcr.injector\n      );\n      this.detectChanges();\n    } else {\n      this.compRef = factory.create(this.args.injector);\n      this.args.appRef.attachView(this.compRef.hostView);\n    }\n  }\n\n  get ref() {\n    return this.compRef;\n  }\n\n  setInput<K extends keyof ExcludeFunctions<T>>(input: K, value: T[K]) {\n    this.compRef.instance[input] = value;\n\n    return this;\n  }\n\n  setInputs(inputs: Partial<ExcludeFunctions<T>>) {\n    Object.keys(inputs).forEach((input) => {\n      this.compRef.instance[input] = inputs[input];\n    });\n\n    return this;\n  }\n\n  detectChanges() {\n    this.compRef.hostView.detectChanges();\n    return this;\n  }\n\n  appendTo(container: Element) {\n    container.appendChild(this.getElement());\n\n    return this;\n  }\n\n  removeFrom(container: Element) {\n    container.removeChild(this.getElement());\n\n    return this;\n  }\n\n  getRawContent() {\n    return this.getElement().outerHTML;\n  }\n\n  getElement<T extends Element>(): T {\n    return this.compRef.location.nativeElement;\n  }\n\n  destroy() {\n    this.compRef.destroy();\n    !this.args.vcr && this.args.appRef.detachView(this.compRef.hostView);\n    this.compRef = null;\n  }\n}\n","import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injectable,\n  Injector,\n  TemplateRef,\n  Type,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Content, isComponent, isString, isTemplateRef, ViewRef } from './types';\nimport { TplRef } from './template-ref';\nimport { StringRef } from './string-ref';\nimport { CompRef } from './comp-ref';\n\ninterface _ViewOptions {\n  vcr?: ViewContainerRef | undefined;\n}\n\ninterface CompViewOptions extends _ViewOptions {\n  injector?: Injector | undefined;\n}\n\ninterface TemplateViewOptions extends _ViewOptions {\n  context?: Record<string, any> | undefined;\n}\n\nexport type ViewOptions = _ViewOptions & CompViewOptions & TemplateViewOptions;\n\n@Injectable({ providedIn: 'root' })\nexport class ViewService {\n  constructor(private resolver: ComponentFactoryResolver, private injector: Injector, private appRef: ApplicationRef) {}\n\n  createComponent<C>(component: Type<C>, options: CompViewOptions = {}) {\n    return new CompRef<C>({\n      component,\n      vcr: options.vcr,\n      injector: options.injector || this.injector,\n      appRef: this.appRef,\n      resolver: this.resolver,\n    });\n  }\n\n  createTemplate<C>(tpl: TemplateRef<C>, options: TemplateViewOptions = {}) {\n    return new TplRef({\n      vcr: options.vcr,\n      appRef: this.appRef,\n      tpl,\n      context: options.context,\n    });\n  }\n\n  createView(content: Content, viewOptions: _ViewOptions & CompViewOptions & TemplateViewOptions = {}): ViewRef {\n    if (isTemplateRef(content)) {\n      return this.createTemplate(content, viewOptions);\n    } else if (isComponent(content)) {\n      return this.createComponent(content, viewOptions);\n    } else if (isString(content)) {\n      return new StringRef(content);\n    } else {\n      throw 'Type of content is not supported';\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'dynamic-view',\n  template: ` <div [innerHTML]=\"content\"></div> `,\n})\nexport class DynamicViewComponent {\n  @Input() content: string;\n}\n","import {\n  Directive,\n  Injector,\n  Input,\n  NgModule,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewContainerRef,\n} from '@angular/core';\nimport { Content, ViewRef, isString } from '../views/types';\nimport { ViewService } from '../views/view';\nimport { CompRef } from '../views/comp-ref';\nimport { DynamicViewComponent } from './dynamic-view.component';\n\n@Directive({\n  selector: '[dynamicView]',\n})\nexport class DynamicViewDirective implements OnInit, OnChanges, OnDestroy {\n  @Input('dynamicView') view: Content;\n  @Input('dynamicViewInjector') injector: Injector;\n  @Input('dynamicViewContext') context: any;\n\n  private viewRef: ViewRef;\n\n  constructor(private defaultTpl: TemplateRef<any>, private vcr: ViewContainerRef, private viewService: ViewService) {}\n\n  ngOnInit() {\n    this.resolveContentType();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.view && !changes.view.isFirstChange()) {\n      this.resolveContentType();\n    }\n  }\n\n  resolveContentType() {\n    this.viewRef?.destroy();\n    if (isString(this.view)) {\n      this.viewRef = this.viewService.createComponent(DynamicViewComponent, {\n        vcr: this.vcr,\n        injector: this.injector,\n      });\n      (this.viewRef as CompRef<DynamicViewComponent>).setInput('content', this.view).detectChanges();\n    } else {\n      this.viewRef = this.viewService.createView(this.view || this.defaultTpl, {\n        vcr: this.vcr,\n        injector: this.injector ?? this.vcr.injector,\n        context: this.context,\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.viewRef?.destroy();\n  }\n}\n\n@NgModule({\n  declarations: [DynamicViewDirective, DynamicViewComponent],\n  exports: [DynamicViewDirective],\n})\nexport class DynamicViewModule {}\n","/*\n * Public API Surface of overview\n */\nexport { TeleportModule, TeleportDirective } from './lib/teleport/teleport.module';\nexport { TeleportOutletDirective } from './lib/teleport/teleport-outlet.directive';\nexport { DynamicViewModule, DynamicViewDirective } from './lib/dynamic-view/dynamic-view.directive';\nexport { StringRef } from './lib/views/string-ref';\nexport { CompRef } from './lib/views/comp-ref';\nexport { TplRef } from './lib/views/template-ref';\nexport { ViewService, ViewOptions } from './lib/views/view';\nexport { isComponent, isTemplateRef, Content, isString, ViewRef } from './lib/views/types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {DynamicViewComponent as ɵb} from './lib/dynamic-view/dynamic-view.component';\nexport {TeleportService as ɵa} from './lib/teleport/teleport.service';"]}